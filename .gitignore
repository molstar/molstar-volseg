### Custom
molstar-extension/node_modules/
molstar-extension/debug.log
molstar-extension/npm-debug.log
molstar-extension/tsconfig.tsbuildinfo
molstar-extension/tsconfig.commonjs.tsbuildinfo
!molstar-volseg/molstar-extension/scripts
temp_working_folder/*
db/cellstar_db/tests/test_data/*
test-data/preprocessor/db_building_parameters.json
preprocessor/cellstar_preprocessor/tests/test_data/working_folder/*
non-preprocessed_data/
vs_toolkit/tests/test_data/query_parameters/*
test-data/preprocessor/sample_volumes/*
!test-data/preprocessor/sample_volumes/emdb/EMD-1832.map
!test-data/preprocessor/sample_segmentations/emdb_sff/emd_1832.hff
test-data/preprocessor/sample_segmentations/*
test-data/db/
preprocessor.3.9.0/
preprocessor/_old/sample_arr_plots/
test-data/preprocessor/raw_input_files/
sfftk_latest_env/
test_env/
.benchmarks/
check_dirs_before_building.sh
check_dirs_before_creating_fake_entries.sh
ciftools-python/
cpu_profiling/
create_fake_db_entries.sh
db-*/
db_*/
db/emdb/
db/empiar/
db not_quantized_for_comparing_meta/
iota_yzx.ccp4.gz
log.txt
node_modules/
package.json
package-lock.json
parametrized_dbs_input_params.txt
preprocessor.3.10.4.env/
test-data/preprocessor/fake_raw_input_files/*
!test-data/preprocessor/fake_raw_input_files/.gitkeep
test-data/preprocessor/raw_input_files/emdb/emd-1181/
test-data/preprocessor/raw_input_files/emdb/emd-1547/
test-data/preprocessor/raw_input_files/emdb/emd-88888/*
test-data/preprocessor/raw_input_files/emdb/emd-9199/*
test-data/preprocessor/raw_input_files/emdb/emd-99999/*
test-data/preprocessor/raw_input_files/emdb/empiar_10087_c2_tomo02/
test-data/preprocessor/raw_input_files/emdb/empiar_10087_e64_tomo03/
test-data/preprocessor/raw_input_files/empiar/
test-data/preprocessor/real_volumes_for_conversion_to_fake_sff/*
!test-data/preprocessor/real_volumes_for_conversion_to_fake_sff/.gitkeep
test-data/preprocessor/sample_segmentations/emdb_sff/emd_1181.hff
test-data/preprocessor/sample_segmentations/emdb_sff/empiar_10087_c2_tomo02.hff
test-data/preprocessor/sample_segmentations/emdb_sff/empiar_10087_c2_tomo02.json
test-data/preprocessor/sample_segmentations/emdb_sff/empiar_10087_e64_tomo03.hff
test-data/preprocessor/sample_segmentations/emdb_sff/empiar_10087_e64_tomo03.json
test-data/preprocessor/sample_volumes/emdb_sff/*
!test-data/preprocessor/sample_volumes/emdb_sff/EMD-1832.map
test-data/preprocessor/temp_raw_input_files/*
test-data/preprocessor/temp_zarr_hierarchy_storage/
preprocessor/emd_13793.map
preprocessor/emd_13856.map.gz
preprocessor/emd_1832.map
preprocessor/emd_9199_.map
preprocessor/empiar_segmentations
preprocessor/fake_segmentations/
preprocessor/log.txt
preprocessor/output_internal_zarr/
#preprocessor/raw_input_files/
preprocessor/raw_input_files/
preprocessor/real_volumes_for_converstion_to_fake_sff/
preprocessor/sample_arr_plots/
#preprocessor/sample_segmentations/
preprocessor/sample_volumes/
preprocessor/src/preprocessors/implementations/sff/data/*
preprocessor/temp/
PYTHONPATH.sh
quantized_db_for_meta_comparison/
_read_ccp4_fields.py
README_ON_HOW_TO_RUN_STUFF_FROM_SABRE.md
requirements.txt_COPY
temp/
**/_trial_temp

### venv
Scripts
share
pyvenv.cfg

### VisualStudioCode template
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.code-workspace

# Local History for Visual Studio Code
.history/

### JetBrains template
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider
# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

# User-specific stuff
.idea/**
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/**/usage.statistics.xml
.idea/**/dictionaries
.idea/**/shelf

# Generated files
.idea/**/contentModel.xml

# Sensitive or high-churn files
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml
.idea/**/dbnavigator.xml

# Gradle
.idea/**/gradle.xml
.idea/**/libraries

# Gradle and Maven with auto-import
# When using Gradle or Maven with auto-import, you should exclude module files,
# since they will be recreated, and may cause churn.  Uncomment if using
# auto-import.
# .idea/artifacts
# .idea/compiler.xml
# .idea/jarRepositories.xml
# .idea/modules.xml
# .idea/*.iml
# .idea/modules
# *.iml
# *.ipr

# CMake
cmake-build-*/

# Mongo Explorer plugin
.idea/**/mongoSettings.xml

# File-based project format
*.iws

# IntelliJ
out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Cursive Clojure plugin
.idea/replstate.xml

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties
fabric.properties

# Editor-based Rest Client
.idea/httpRequests

# Android studio 3.1+ serialized cache file
.idea/caches/build_file_checksums.ser

### Python template
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
preprocessor.env/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

