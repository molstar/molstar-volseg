{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Installation","text":"<p>This page explains how to install Mol* Volumes &amp; Segmentations 2.0</p>"},{"location":"#install-the-server","title":"Install the server","text":"<p>To install the server, clone the Github repository and change current directory to the root repository directory (<code>molstar-volseg</code> by default):</p> <pre><code>git clone https://github.com/molstar/molstar-volseg.git\ncd molstar-volseg\n</code></pre>"},{"location":"#set-up-and-activate-the-environment","title":"Set up and activate the environment","text":"<p>Set up the environment using either Conda:</p> <pre><code>conda env create -f environment.yaml\n</code></pre> <p>or Mamba:</p> <pre><code>mamba env create -f environment.yaml\n</code></pre> <p>Activate the created environment:</p> <pre><code>conda activate cellstar-volume-server\n</code></pre>"},{"location":"preprocessor/advanced/","title":"Advanced Parameters","text":"<p>The Preprocessor offers a selection of additional command-line arguments that empower users to exert finer-grained control over the preprocessing workflow. These arguments are not mandatory but can be employed to tailor the preprocessing to specific requirements.</p>"},{"location":"preprocessor/advanced/#-quantize-dtype-str","title":"--quantize-dtype-str","text":"<p>This argument enables the quantization of volumetric data. Quantization reduces the data's precision, resulting in a smaller file size but lowers the precision of the data. When employing this argument, users can specify the desired data type for the quantized data using either the <code>u1</code> option (resulting in an 8-bit unsigned byte data type) or the <code>u2</code> option (resulting in a 16-bit unsigned integer data type).</p>"},{"location":"preprocessor/advanced/#-quantize-downsampling-levels","title":"--quantize-downsampling-levels","text":"<p>The <code>--quantize-downsampling-levels</code> argument facilitates the selective quantization of downsampled data within the preprocessing workflow. This argument allows users to specify a sequence of numerical identifiers, where each identifier corresponds to a specific downsampling level. For instance, the argument <code>1 2</code> would trigger the quantization of downsampling level <code>1</code> (typically original resolution volume data), and downsampling level <code>2</code> (typically representing data downsampled twice in each direction).</p> <p>The data type employed for the quantized data will adhere to the specifications provided using the <code>--quantize-dtype-str</code> argument (described previously).</p>"},{"location":"preprocessor/advanced/#-force-volume-dtype","title":"--force-volume-dtype","text":"<p>The <code>--force-volume-dtype</code> argument provides users with the capability to override the automatically inferred data type for volume data derived from electron density maps. This option proves particularly valuable in scenarios where the electron density map may contain erroneous header information. A common example of such erroneous data is an incorrect value of <code>MODE</code> variable within the main header of MRC/CCP4 files.</p>"},{"location":"preprocessor/advanced/#-max-size-per-downsampling-lvl-mb","title":"--max-size-per-downsampling-lvl-mb","text":"<p>The <code>--max-size-per-downsampling-lvl-mb</code> argument, along with the following three arguments to be discussed, empowers users to exert a more granular level of control over the downsampling process within the Preprocessor. This argument facilitates the specification of a desired maximum data size per downsampling level, expressed in megabytes (MB).</p>"},{"location":"preprocessor/advanced/#-min-size-per-downsampling-lvl-mb","title":"--min-size-per-downsampling-lvl-mb","text":"<p>The <code>--min-size-per-downsampling-lvl-mb</code> argument complements the previously discussed <code>--max-size-per-downsampling-lvl-mb</code> argument, enabling users to define a minimum desired data size per downsampling level, also expressed in megabytes (MB). This argument possesses a default value of <code>5.0</code> MB. The Preprocessor employs both the minimum and maximum size constraints to determine the optimal downsampling strategy.</p>"},{"location":"preprocessor/advanced/#-min-downsampling-level","title":"--min-downsampling-level","text":"<p>This argument allows users to specify the minimum level of downsampling to be applied to the input data. The argument takes an integer value representing the desired minimum downsampling level.</p>"},{"location":"preprocessor/advanced/#-max-downsampling-level","title":"--max-downsampling-level","text":"<p>This argument allows users to specify the maximum level of downsampling to be applied to the input data. Similar to the <code>--min-downsampling-level</code> argument, it takes an integer value representing the desired maximum downsampling level.</p>"},{"location":"preprocessor/advanced/#-remove-original-resolution","title":"--remove-original-resolution","text":"<p>The <code>--remove-original-resolution</code> argument functions as an optional flag that can be employed by users to instruct the Preprocessor to exclude the original resolution data from the final entry data. This can be a valuable option in scenarios where storage space is a significant constraint, as the original resolution data typically have the largest size within an entry.</p>"},{"location":"preprocessor/advanced/#extra-data-as-additional-input-file-for-preprocessor","title":"Extra data as additional input file for Preprocessor","text":"<p>In addition to the standard command-line arguments discussed previously, the Preprocessor offers a set of advanced functionalities currently classified as experimental. These functionalities are designed to:</p> <ul> <li>Supplement database entries: Users can leverage this functionality to incorporate supplementary data into the corresponding database entry during the preprocessing stage. This can be particularly beneficial in situations where the raw input data lacks crucial information or contains erroneous details.</li> <li>Overwrite database entry parameters: The Preprocessor also empowers users to modify specific parameters associated with the database entry during preprocessing. This functionality can be valuable for correcting inconsistencies or inaccuracies within the raw input data.</li> </ul> <p>It is important to note that this functionality is under active development, and we welcome any suggestions or contributions from the user community to further enhance its capabilities.</p> <p>To leverage this advanced functionality, users should provide an additional input file in JSON format alongside the standard input files containing volume and/or segmentation data. The structure of this JSON file needs to adhere to a specific data model:</p> <p></p> <p>Note that all fields within the extra data section are designated as optional. Besides, the file containing the extra data must be provided as the first input file during the preprocessing execution. Full JSON schema is available online at Github repository. </p> <p>Tutorial on adding empiar-11756 entry to the internal database provides a practical example of utilizing JSON with extra data as one of the Preprocessor's input arguments. In this specific instance, this advanced functionality is employed to override the voxel size that the Preprocessor would automatically determine based on erroneous map header data within the volume map input file.</p> <p>The following excerpt showcases a sample structure for a JSON file containing extra data, specifically designed for the aforementioned use case of overriding voxel size information:</p> <p>This section presents another illustrative example pertaining to the preprocessing workflow for the <code>EMPIAR-10988</code> entry. A detailed tutorial outlining this process can be found at Github repository.</p> <p>In this particular case, the purpose of using extra data is to modify the segment identifications automatically assigned by the Preprocessor during the analysis of electron density mask files. Grid data in these files typically consists of integer values, e.g. <code>1</code> or <code>2</code>. As the Preprocessor automatically uses these values as segment IDs, this translates to generic segment names, such as <code>Segment 1</code>, <code>Segment 2</code> etc. While it is possible to manually edit this via <code>Annotation Editor</code>, we offer an advanced option that allows the user to achieve the same result with the help of extra data functionality. It allows users to easily replace these with more biologically relevant segment IDs, such as <code>cytoplasm</code> or <code>mitochondria</code> via providing a JSON file following specific format as the first input file to the Preprocessor.</p> <p>The following code snippet illustrates a possible configuration for the extra data JSON file, specifically designed to achieve the aforementioned customization of segment IDs for the EMPIAR-10988 entry:</p> <pre><code>{\n    \"segmentation\": {\n        \"custom_segment_ids_mapping\": {\n            \"TS_026.labels\": {\n                \"1\": \"cytoplasm\",\n                \"2\": \"mitochondria\",\n                \"3\": \"vesicle\",\n                \"4\": \"tube\",\n                \"5\": \"ER\",\n                \"6\": \"nuclear envelope\",\n                \"7\": \"nucleus\",\n                \"8\": \"vacuole\",\n                \"9\": \"lipid droplet\",\n                \"10\": \"golgi\",\n                \"11\": \"vesicular body\",\n                \"13\": \"not identified compartment\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"preprocessor/delete/","title":"delete","text":"<p>Using the <code>delete</code> command allows the user to remove an entry from an internal database. While it is possible to achieve the same result by manually deleting an entry folder, using the <code>delete</code> command is a more standardized approach that also opens a way for automatization via user-created custom scripts. The command <code>delete</code> requires the following arguments:</p> Argument Description <code>--entry_id</code> (string) entry ID in internal database, corresponding to the entry folder name (e.g. <code>emd-1832</code>) <code>--source_db</code> (string) source database, corresponding to the source database folder name in internal database (e.g. <code>emdb</code>) <code>--db_path</code> (string) specifies the path to the internal database"},{"location":"preprocessor/edit_descriptions/","title":"edit-descriptions","text":"<p>This command allows editing (adding or modifying) descriptions in <code>annotations.json</code> which is a part of internal database entry. Requires the following arguments:</p> Argument Description <code>--entry_id</code> (string) entry ID in internal database, corresponding to the entry folder name (e.g. <code>emd-1832</code>) <code>--source_db</code> (string) source database, corresponding to the source database folder name in internal database (e.g. <code>emdb</code>) <code>--db_path</code> (string) specifies the path to the internal database <code>--data_json_path</code> (string) specifies path to JSON file with descriptions. This file represents a list of objects, each of which follow a specific data model (see diagram below). An example of such file is provided under the schema. <p></p> <pre><code>[\n    {\n        \"description\": null,\n        \"id\": \"656c7c04-3650-4d10-a714-1173b43bf256\",\n        \"is_hidden\": null,\n        \"metadata\": null,\n        \"name\": \"DNA replication licensing factor MCM4\",\n        \"target_id\": {\n            \"segment_id\": 97,\n            \"segmentation_id\": \"0\"\n        },\n        \"target_kind\": \"lattice\",\n        \"time\": 0\n    },\n    {\n        \"description\": null,\n        \"external_references\": [\n            {\n                \"accession\": \"GO_0006260\",\n                \"description\": \"The cellular metabolic process in which a cell duplicates one or more molecules of DNA. DNA replication begins when specific sequences, known as origins of replication, are recognized and bound by initiation proteins, and ends when the original DNA molecule has been completely duplicated and the copies topologically separated. The unit of replication usually corresponds to the genome of the cell, an organelle, or a virus. The template for replication can either be an existing DNA molecule or RNA.\",\n                \"id\": 41,\n                \"label\": \"DNA replication\",\n                \"resource\": \"go\",\n                \"url\": \"http://purl.obolibrary.org/obo/GO_0006260\"\n            }\n        ],\n        \"id\": \"8a1739df-6d3a-49f6-b2e6-7927d953f8af\",\n        \"is_hidden\": null,\n        \"metadata\": null,\n        \"name\": \"DNA replication licensing factor MCM2\",\n        \"target_id\": {\n            \"segment_id\": 85,\n            \"segmentation_id\": \"0\"\n        },\n        \"target_kind\": \"lattice\",\n        \"time\": 0\n    }\n]\n</code></pre>"},{"location":"preprocessor/edit_segment_annotations/","title":"edit-segment-annotations","text":"<p>This command allows editing segment  annotations in <code>annotations.json</code> which is a part of an internal database entry. Requires the following arguments:</p> Argument Description <code>--entry_id</code> (string) entry ID in internal database, corresponding to the entry folder name (e.g. <code>emd-1832</code>) <code>--source_db</code> (string) source database, corresponding to the source database folder name in internal database (e.g. <code>emdb</code>) <code>--db_path</code> (string) specifies the path to the internal database <code>--data_json_path</code> (string) specifies path to JSON file with segment annotations. This file represents a list of objects, each of which follow a specific data model (see diagram below, <code>annotations</code> field). An example of such file is provided under the schema. <p> <pre><code>[\n    {\n        \"color\": [\n            0.1,\n            0.1,\n            0.1,\n            1.0\n        ],\n        \"id\": \"bd89b35f-25c3-4cef-bcb3-1df624b13f4d\",\n        \"segment_id\": 85,\n        \"segment_kind\": \"lattice\",\n        \"segmentation_id\": \"0\",\n        \"time\": 0\n    },\n    {\n        \"color\": [\n            0.9,\n            0.9,\n            0.9,\n            1.0\n        ],\n        \"id\": \"b79dfd1e-a00c-4cd7-8d49-305c73c1fd81\",\n        \"segment_id\": 93,\n        \"segment_kind\": \"lattice\",\n        \"segmentation_id\": \"0\",\n        \"time\": 0\n    }\n]\n</code></pre></p>"},{"location":"preprocessor/overview/","title":"Preprocessor overview","text":"<p>While Preprocessor is typically used to add entries to the internal database (<code>preprocess</code> command), it can be used for other purposes, such as removing entries from the database.</p>"},{"location":"preprocessor/preprocess/","title":"preprocess","text":"<p>The <code>preprocess</code> command of <code>preprocessor/cellstar_preprocessor/preprocess.py</code> script is used for adding entries to the database. It requires the following arguments:</p> Argument Description <code>--mode</code> Either <code>add</code> (adding entry to the database) or <code>extend</code> (extend data of existing entry) <code>--quantize-dtype-str</code> Optional data quantization (options are - <code>u1</code> or <code>u2</code>), less precision, but also requires less storage. Not used by default <code>--quantize-downsampling-levels</code> Specify which downsampling level should be quantized as a sequence of numbers, e.g. <code>1 2</code>. Not used by default <code>--force-volume-dtype</code> optional data type of volume data to be used instead of the one used volume file. Not used by default <code>--max-size-per-downsampling-lvl-mb</code> Maximum size of data per downsampling level in MB. Used to deterimine the number of downsampling steps data from which will be stored <code>--min-size-per-downsampling-lvl-mb</code> Minimum size of data per downsampling level in MB. Used to deterimine the number of downsampling steps data from which will be stored. Default is <code>5</code> <code>--min-downsampling-level</code> Minimum downsampling level <code>--max-downsampling-level</code> Maximum downsampling level <code>--remove-original-resolution</code> Optional flag for removing original resolution data <code>--entry-id</code> entry id (e.g. <code>emd-1832</code>) to be used as database folder name for that entry <code>--source-db</code> source database name (e.g. <code>emdb</code>) to be used as DB folder name <code>--source-db-id</code> actual source database ID of that entry (will be used to compute metadata) <code>--source-db-name</code> actual source database name (will be used to compute metadata) <code>--working-folder</code> path to directory where temporary files will be stored during the build process <code>--db-path</code> path to folder with database <code>--input-path</code> Path to input file. Should be provided for each input file separately (see examples) <code>--input-kind</code> Kind of input file. One of the following: <code>[map|sff|omezarr|mask|application_specific_segmentation|custom_annotations|nii_volume|nii_segmentation|geometric_segmentation|star_file_geometric_segmentation|ometiff_image|ometiff_segmentation|extra_data]</code>. See examples for more details. <p>As one can see, <code>preprocess</code> command has two possible modes for the <code>preprocess</code>: <code>add</code> and <code>extend</code>.</p>"},{"location":"preprocessor/preprocess/#preprocess-mode-add","title":"preprocess --mode add","text":"<p>In case of <code>add</code> mode, an entry will be created based on the input files and parameters provided.</p> <p>Example of usage of mode <code>add</code>:</p> <pre><code>python preprocessor/cellstar_preprocessor/preprocess.py preprocess --mode add --input-path test-data/preprocessor/sample_volumes/emdb/EMD-1832.map --input-kind map --entry-id emd-1832 --source-db emdb --source-db-id emd-1832 --source-db-name emdb --working-folder temp_working_folder --db-path preprocessor/temp/test_db\n</code></pre> <p>This command will add an <code>emd-1832</code> entry to the internal database, throwing an exception if this entry already exists.</p>"},{"location":"preprocessor/preprocess/#prepocess-mode-extend","title":"prepocess --mode extend","text":"<p>Another option is mode <code>extend</code> which will extend the entry data with e.g. additional segmentation. For example, initially an <code>emd-1832</code> entry may be added to the database using mode <code>add</code> (see code listing above). Note that at this point it contains only the volume data as we provided only the electron density map as input.</p> <p>Then the user may decide to add segmentation data to it. This can be achieved using mode <code>extend</code> of <code>preprocess</code> command:</p> <pre><code>python preprocessor/cellstar_preprocessor/preprocess.py preprocess --mode extend --input-path test-data/preprocessor/sample_segmentations/emdb_sff/emd_1832.hff --input-kind sff --entry-id emd-1832 --source-db emdb --source-db-id emd-1832 --source-db-name emdb --working-folder temp_working_folder --db-path preprocessor/temp/test_db\n</code></pre> <p>Note that the values of arguments <code>--entry-id</code>, <code>--source-db</code>, <code>--source-db-id</code>, <code>--source-db-name</code>, and <code>--db-path</code> should be exactly the same as the ones used when the entry was initially created using mode <code>add</code>. After using this command, the <code>emd-1832</code> entry will have not only volume data, but also lattice segmentation data based on the provided EMDB SFF file.</p>"},{"location":"preprocessor/preprocess/#examples-of-using-preprocess-command-in-mode-add","title":"Examples of using preprocess command in mode add","text":""},{"location":"preprocessor/preprocess/#emd-1832","title":"EMD-1832","text":"<ul> <li>To add an emd-1832 entry to the internal database, from root directory (<code>molstar-volseg</code> by default) run:</li> </ul> <pre><code>python preprocessor/cellstar_preprocessor/preprocess.py preprocess --mode add --input-path test-data/preprocessor/sample_volumes/emdb/EMD-1832.map --input-kind map --input-path test-data/preprocessor/sample_segmentations/emdb_sff/emd_1832.hff --input-kind sff --entry-id emd-1832 --source-db emdb --source-db-id emd-1832 --source-db-name emdb --working-folder temp_working_folder --db-path preprocessor/temp/test_db --quantize-dtype-str u1\n</code></pre> <p>It will add entry <code>emd-1832</code> to the database and during preprocessing volume data will be quantized with <code>u1</code> option</p>"},{"location":"preprocessor/preprocess/#idr-13457537","title":"IDR-13457537","text":"<ul> <li>First unzip <code>test-data/preprocessor/sample_segmentations/idr/13457537.zarr.zip</code> file. E.g. from the root repository directory (<code>molstar-volseg</code> by default) run: <pre><code>cd test-data/preprocessor/sample_segmentations/idr/idr-13457537\nunzip 13457537.zarr.zip\n</code></pre></li> </ul> <p>To add entry to the database, from the root repository directory (<code>molstar-volseg</code> by default) run e.g.: <pre><code>python preprocessor/cellstar_preprocessor/preprocess.py preprocess --mode add --input-path test-data/preprocessor/sample_segmentations/idr/idr-13457537/13457537.zarr --input-kind omezarr --entry-id idr-13457537 --source-db idr --source-db-id idr-13457537 --source-db-name idr --working-folder temp_working_folder --db-path preprocessor/temp/test_db\n</code></pre></p> <p>It will add entry <code>idr-13457537</code> to the database.</p>"},{"location":"preprocessor/preprocess/#emd-1832-geometric-segmentation","title":"EMD-1832-geometric-segmentation","text":"<ul> <li>To add an emd-1832 entry with artificially created geometric segmentation to the internal database, from root directory (<code>molstar-volseg</code> by default) run e.g.:</li> </ul> <pre><code>python preprocessor/cellstar_preprocessor/preprocess.py preprocess --mode add --input-path test-data/preprocessor/sample_volumes/emdb/EMD-1832.map --input-kind map --input-path test-data/preprocessor/sample_segmentations/geometric_segmentations/geometric_segmentation_1.json --input-kind geometric_segmentation --input-path test-data/preprocessor/sample_segmentations/geometric_segmentations/geometric_segmentation_2.json --input-kind geometric_segmentation  --entry-id emd-1832-geometric-segmentation --source-db emdb --source-db-id emd-1832-geometric-segmentation --source-db-name emdb --working-folder temp_working_folder --db-path preprocessor/temp/test_db\n</code></pre> <p>It will add entry <code>emd-1832-geometric-segmentation</code> to the database</p>"},{"location":"preprocessor/preprocess/#emd-1273-with-segmentations-based-on-masks","title":"EMD-1273 with segmentations based on masks","text":"<ol> <li>Download MAP and extract it to <code>test-data/preprocessor/sample_volumes/emdb/</code></li> <li>Create folder <code>test-data/preprocessor/sample_segmentations/emdb_masks/</code> if not exists</li> <li> <p>Download masks to <code>test-data/preprocessor/sample_segmentations/emdb_masks/</code>:</p> <ul> <li>Mask 1</li> <li>Mask 2</li> <li>Mask 3</li> <li>Mask 4</li> <li>Mask 5</li> </ul> </li> <li> <p>To add an <code>emd-1273</code> entry with segmentations based on masks to the internal database, from root directory (<code>molstar-volseg</code> by default) run:</p> </li> </ol> <pre><code>python preprocessor/cellstar_preprocessor/preprocess.py preprocess --mode add --input-path test-data/preprocessor/sample_volumes/emdb/emd_1273.map --input-kind map --input-path test-data/preprocessor/sample_segmentations/emdb_masks/emd_1273_msk_1.map --input-kind mask --input-path test-data/preprocessor/sample_segmentations/emdb_masks/emd_1273_msk_2.map --input-kind mask --input-path test-data/preprocessor/sample_segmentations/emdb_masks/emd_1273_msk_3.map --input-kind mask --input-path test-data/preprocessor/sample_segmentations/emdb_masks/emd_1273_msk_4.map --input-kind mask --input-path test-data/preprocessor/sample_segmentations/emdb_masks/emd_1273_msk_5.map --input-kind mask --entry-id emd-1273 --source-db emdb --source-db-id emd-1273 --source-db-name emdb --working-folder temp_working_folder --db-path preprocessor/temp/test_db\n</code></pre>"},{"location":"preprocessor/preprocess/#empiar-10988","title":"EMPIAR-10988","text":"<p>In order to add an <code>empiar-10988</code> entry with lattice segmentations based on masks to the internal database, follow the steps below:</p> <ol> <li> <p>Obtain the raw input files:</p> <p>Create <code>test-data/preprocessor/sample_volumes/empiar/empiar-10988</code> folder, change current directory to it, and download electron density map file. E.g. from the root repository directory (<code>molstar-volseg</code> by default) run:</p> <pre><code>mkdir -p test-data/preprocessor/sample_volumes/empiar/empiar-10988\ncd test-data/preprocessor/sample_volumes/empiar/empiar-10988\nwget https://ftp.ebi.ac.uk/empiar/world_availability/10988/data/DEF/tomograms/TS_026.rec\n</code></pre> <p>Next, create <code>test-data/preprocessor/sample_segmentations/empiar/empiar-10988</code> directory, change current directory to it, and download electron density mask files. E.g. from the root repository directory (<code>molstar-volseg</code> by default) run:</p> <pre><code>mkdir -p test-data/preprocessor/sample_segmentations/empiar/empiar-10988\ncd test-data/preprocessor/sample_segmentations/empiar/empiar-10988\nwget https://ftp.ebi.ac.uk/empiar/world_availability/10988/data/DEF/labels/TS_026.labels.mrc\nwget https://ftp.ebi.ac.uk/empiar/world_availability/10988/data/DEF/labels/TS_026_cyto_ribosomes.mrc\nwget https://ftp.ebi.ac.uk/empiar/world_availability/10988/data/DEF/labels/TS_026_cytosol.mrc\nwget https://ftp.ebi.ac.uk/empiar/world_availability/10988/data/DEF/labels/TS_026_fas.mrc\nwget https://ftp.ebi.ac.uk/empiar/world_availability/10988/data/DEF/labels/TS_026_membranes.mrc\n</code></pre> </li> <li> <p>Prepare extra data     By default, Preprocessor will use segment IDs based on grid values in mask file. It is possible to overwrite them using additional input file with extra data, mapping segment IDs used by default (e.g. \"1\", \"2\" etc.) to biologically meaningful segment IDs (e.g., \"cytoplasm\", \"mitochondria\" etc.).     Create <code>extra_data_empiar_10988.json</code> file in root repository directory with the following content:     <pre><code>{\n    \"segmentation\": {\n        \"segment_ids_to_segment_names_mapping\": {\n            \"TS_026.labels\": {\n                \"1\": \"cytoplasm\",\n                \"2\": \"mitochondria\",\n                \"3\": \"vesicle\",\n                \"4\": \"tube\",\n                \"5\": \"ER\",\n                \"6\": \"nuclear envelope\",\n                \"7\": \"nucleus\",\n                \"8\": \"vacuole\",\n                \"9\": \"lipid droplet\",\n                \"10\": \"golgi\",\n                \"11\": \"vesicular body\",\n                \"13\": \"not identified compartment\"\n            }\n        }\n    }\n}\n</code></pre></p> </li> </ol> <p>The content of the file is based on the content of <code>10988/data/DEF/labels/organelle_labels.txt</code> from EMPIAR-10988 webpage. It maps the segment IDs for segmentation from <code>TS_026.labels.mrc</code> file to biologically relevant segment names.</p> <ol> <li> <p>Add <code>empiar-10988</code> entry to the internal database</p> <p>In order to add an <code>empiar-10988</code> entry with segmentations based on masks to the internal database, from root directory (<code>molstar-volseg</code> by default) run:</p> </li> </ol> <pre><code>    python preprocessor/cellstar_preprocessor/preprocess.py preprocess --mode add --input-path extra_data_empiar_10988.json --input-kind extra_data --input-path test-data/preprocessor/sample_volumes/empiar/empiar-10988/TS_026.rec --input-kind map --input-path test-data/preprocessor/sample_segmentations/empiar/empiar-10988/TS_026.labels.mrc --input-kind mask --input-path test-data/preprocessor/sample_segmentations/empiar/empiar-10988/TS_026_membranes.mrc --input-kind mask --input-path test-data/preprocessor/sample_segmentations/empiar/empiar-10988/TS_026_fas.mrc --input-kind mask --input-path test-data/preprocessor/sample_segmentations/empiar/empiar-10988/TS_026_cytosol.mrc --input-kind mask --input-path test-data/preprocessor/sample_segmentations/empiar/empiar-10988/TS_026_cyto_ribosomes.mrc --input-kind mask --min-downsampling-level 4 --remove-original-resolution --entry-id empiar-10988 --source-db empiar --source-db-id empiar-10988 --source-db-name empiar --working-folder temp_working_folder --db-path preprocessor/temp/test_db\n</code></pre> <p>Note that we are setting minimum downsampling level to <code>4</code> by using <code>--min-downsampling-level</code> argument and removing original resolution via <code>--remove-original-resolution</code> argument. The reason for this is that rendering of the original resolution data, and even the 2nd downsampling is computationally demanding. It is not related to the application itself, but rather to the size and complexity of the dataset.   </p>"},{"location":"preprocessor/preprocess/#empiar-11756","title":"EMPIAR-11756","text":"<p>In order to add an empiar-11756 entry with geometric segmentation to the internal database, follow the steps below:</p> <ol> <li> <p>Obtain the raw input files</p> <p>Create <code>test-data/preprocessor/sample_volumes/empiar/empiar-11756</code> folder, change current directory to it, and download electron density map file. E.g. from the root repository directory (<code>molstar-volseg</code> by default) run:</p> <pre><code>mkdir -p test-data/preprocessor/sample_volumes/empiar/empiar-11756\ncd test-data/preprocessor/sample_volumes/empiar/empiar-11756\nwget https://ftp.ebi.ac.uk/empiar/world_availability/11756/data/tomoman_minimal_project/cryocare_bin4_tomoname/17072022_BrnoKrios_Arctis_p3ar_grid_Position_35.mrc\n</code></pre> <p>Next, create <code>test-data/preprocessor/sample_segmentations/empiar/empiar-11756</code> directory, change current directory to it, and download two <code>.star</code> files. E.g. from the root repository directory (<code>molstar-volseg</code> by default) run:</p> <pre><code>mkdir -p test-data/preprocessor/sample_segmentations/empiar/empiar-11756\ncd test-data/preprocessor/sample_segmentations/empiar/empiar-11756\nwget https://ftp.ebi.ac.uk/empiar/world_availability/11756/data/tomoman_minimal_project/17072022_BrnoKrios_Arctis_p3ar_grid_Position_35/metadata/particles/rln_nucleosome_bin1_tomo_649.star\nwget https://ftp.ebi.ac.uk/empiar/world_availability/11756/data/tomoman_minimal_project/17072022_BrnoKrios_Arctis_p3ar_grid_Position_35/metadata/particles/rln_ribosome_bin1_tomo_649.star\n</code></pre> </li> <li> <p>Prepare input files.</p> <p>This EMPIAR entry contains relevant data that can be used to render geometric segmentation in <code>.star</code> format. To be able to use this data, .star files need to be parsed into the standard Mol* VS 2.0 format for geometric segmentations. This can be achieved by using custom script <code>preprocessor/cellstar_preprocessor/tools/parse_star_file/parse_single_star_file.py</code> that is part of our solution. In parallel, this script allows to set the biologically meaningful segmentation IDs for both geometric segmentations based on the data from EMPIAR entry webpage (i.e. <code>ribosomes</code> and <code>nucleosomes</code>). In order to parse both <code>.star</code> files, from the root repository directory (<code>molstar-volseg</code> by default) run:</p> <pre><code>python preprocessor/cellstar_preprocessor/tools/parse_star_file/parse_single_star_file.py --star_file_path test-data/preprocessor/sample_segmentations/empiar/empiar-11756/rln_ribosome_bin1_tomo_649.star --geometric_segmentation_input_file_path test-data/preprocessor/sample_segmentations/empiar/empiar-11756/geometric_segmentation_input_1.json --sphere_radius 100 --segmentation_id ribosomes  --sphere_color_hex FFFF00 --pixel_size 7.84 --star_file_coordinate_divisor 4\n</code></pre> <pre><code>python preprocessor/cellstar_preprocessor/tools/parse_star_file/parse_single_star_file.py --star_file_path test-data/preprocessor/sample_segmentations/empiar/empiar-11756/rln_nucleosome_bin1_tomo_649.star --geometric_segmentation_input_file_path test-data/preprocessor/sample_segmentations/empiar/empiar-11756/geometric_segmentation_input_2.json --sphere_radius 100  --segmentation_id nucleosomes --sphere_color_hex FF0000 --pixel_size 7.84 --star_file_coordinate_divisor 4\n</code></pre> <p>Besides the volume map file from EMPIAR entry webpage has wrong header parameters (voxel size is 0 for all 3 spatial dimensions). To alleviate this, one can use functionality of Preprocessor that allows to overwrite database entry parameters during preprocessing. Based on the data from EMPIAR entry webpage, voxel size should be <code>1.96</code> Angstrom for all 3 dimensions. Since we use volume map file from cryocare_bin4_tomoname folder, this value needs to be multiplied by 4, which gives us <code>7.84</code> Angstrom. According to this, create <code>test-data/preprocessor/sample_volumes/empiar/empiar-11756/empiar-11756-extra-data.json</code> file with the following content:</p> <pre><code>{\n    \"volume\": {\n        \"voxel_size\": [\n            7.84,\n            7.84,\n            7.84\n        ]\n    }   \n}\n</code></pre> </li> <li> <p>Add empiar-11756 entry to the internal database</p> <p>To add an empiar-11756 entry with segmentations based on masks to the internal database, from root directory (<code>molstar-volseg</code> by default) run:</p> <pre><code>python preprocessor/cellstar_preprocessor/preprocess.py preprocess --mode add --input-path test-data/preprocessor/sample_volumes/empiar/empiar-11756/empiar-11756-extra-data.json --input-kind extra_data --input-path test-data/preprocessor/sample_volumes/empiar/empiar-11756/17072022_BrnoKrios_Arctis_p3ar_grid_Position_35.mrc --input-kind map --input-path test-data/preprocessor/sample_segmentations/empiar/empiar-11756/geometric_segmentation_input_1.json --input-kind geometric_segmentation --input-path test-data/preprocessor/sample_segmentations/empiar/empiar-11756/geometric_segmentation_input_2.json --input-kind geometric_segmentation --entry-id empiar-11756 --source-db empiar --source-db-id empiar-11756 --source-db-name empiar --working-folder temp_working_folder --db-path preprocessor/temp/test_db\n</code></pre> <p>It will create a database entry with two geometric segmentations (segmentation IDs <code>ribosomes</code> and <code>nucleosomes</code>).</p> </li> </ol>"},{"location":"preprocessor/preprocess/#custom-hipsc_230741","title":"CUSTOM-hipsc_230741","text":""},{"location":"preprocessor/preprocess/#introduction-to-hipsc_single_cell_image_dataset-structure","title":"Introduction to hipsc_single_cell_image_dataset structure","text":"<p>Structure of the hipsc_single_cell_image_dataset is explained in readme. In this example we will use imaging data and metadata for cell with CellID 230,741 (the first row in metadata.csv).</p>"},{"location":"preprocessor/preprocess/#adding-entry-to-the-internal-database","title":"Adding entry to the internal database","text":"<p>In order to add an custom-hipsc_230741 entry to the internal database, follow the steps below:</p> <ol> <li> <p>Obtain the raw input files</p> <p>Create <code>test-data/preprocessor/sample_volumes/custom/custom-hipsc_230741</code> folder, change current directory to it, and download OME-TIFF file with volume data. E.g. from the root repository directory (<code>molstar-volseg</code> by default) run:</p> <pre><code>mkdir -p test-data/preprocessor/sample_volumes/custom/custom-hipsc_230741\ncd test-data/preprocessor/sample_volumes/custom/custom-hipsc_230741\nwget -O hipsc_230741_volume.ome.tif https://allencell.s3.amazonaws.com/aics/hipsc_single_cell_image_dataset/crop_raw/7922e74b69b77d6b51ea5f1627418397ab6007105a780913663ce1344905db5c_raw.ome.tif?versionId=yQ6YaOj1YgDNgS4DpsnmrNAkOQ.4pgS6\n</code></pre> <p>Next, create <code>test-data/preprocessor/sample_segmentations/custom/custom-hipsc_230741</code> directory, change current directory to it, and download OME-TIFF file with segmentation data. E.g. from the root repository directory (<code>molstar-volseg</code> by default) run: </p> <pre><code>mkdir -p test-data/preprocessor/sample_segmentations/custom/custom-hipsc_230741\ncd test-data/preprocessor/sample_segmentations/custom/custom-hipsc_230741\nwget -O hipsc_230741_segmentation.ome.tif https://allencell.s3.amazonaws.com/aics/hipsc_single_cell_image_dataset/crop_seg/a9a2aa179450b1819f0dfc4d22411e6226f22e3c88f7a6c3f593d0c2599c2529_segmentation.ome.tif?versionId=hf7gc1GKeDjgVYeNBEdmvV0w2NUJS38_\n</code></pre> </li> <li> <p>Prepare addtional input files.</p> <p>OMETIFF input files with volume and segmentation data contains incomplete information for preprocessing and subsequent rendering. To alleviate this, one can create JSON file with extra data, based on the content of metadata.csv. Namely, we need to set voxel size, biologically meaningfull channel IDs for volume data and segmentation IDs for segmentation data, and specify missing OME-TIFF dimenstions. Besides, we can add biologically relavant annotation information (cell stage) that will be rendered in the Mol* VS 2.0 user interface. </p> <p>We can extract the necessary information from metadata.csv using the following approach:</p> <ul> <li>Voxel size: value of <code>scale_micron</code> field (<code>[0.108333, 0.108333, 0.108333]</code>) converted to Angstroms (<code>[1083.33, 1083.33, 1083.33]</code>)</li> <li>Biologically meaningful channel IDs: can be obtained from content of <code>name_dict</code> field, which corresponds to Python dictionary. We need the value of <code>crop_raw</code> key (<code>['dna', 'membrane', 'structure']</code>)</li> <li>Biologically meaningful segmentation IDs: can be obtained from content of <code>name_dict</code> field as well. We need the value of <code>crop_seg</code> key (<code>['dna_segmentation', 'membrane_segmentation', 'membrane_segmentation_roof', 'struct_segmentation', 'struct_segmentation_roof']</code>)</li> <li> <p>Missing OME-TIFF dimensions: is not specified anywhere. To obtain this, we will need to open OME-TIFF file using <code>pyometiff</code> library that should be installed by default while creating the environment for Mol* VS 2.0. </p> <p>You can run <code>python preprocessor/cellstar_preprocessor/tools/check_ometiff_dimensions/check_ometiff_dimensions.py</code> script to check the dimensions of OME-TIFF file:</p> <pre><code>python preprocessor/cellstar_preprocessor/tools/check_ometiff_dimensions/check_ometiff_dimensions.py\n</code></pre> <p>The output of this script should look like this: <pre><code>    Opening hipsc_230741_volume.ome.tif\n    Key not found: list index out of range\n    Key not found: list index out of range\n    key not found list index out of range\n    Key not found: list index out of range\n    hipsc_230741_volume.ome.tif\n    Dimension order:  TZCYX\n    Data array shape (119, 3, 281, 268)\n    Opening hipsc_230741_segmentation.ome.tif\n    Key not found: list index out of range\n    Key not found: list index out of range\n    key not found list index out of range\n    Key not found: list index out of range\n    hipsc_230741_segmentation.ome.tif\n    Dimension order:  TZCYX\n    Data array shape (119, 5, 281, 268)\n</code></pre></p> <p>As you can see, the output for both volume and segmentation file is the same: <pre><code>    Dimension order:  TZCYX\n    Data array shape (119, 3, 281, 268)\n</code></pre> It is obvious that the number of dimensions (5) does not correspond to array shape. In that case, most likely time dimension (<code>T</code>) is missing from the data array.</p> </li> <li> <p>Biologically relevant annotations: We can add biologically relevant annotation data available in metadata.csv. Namely, the content of <code>cell_stage</code> field, which, for that cell ID is <code>M4M5</code>. </p> </li> </ul> <p>Now, when we have obtained all the missing information, create <code>test-data/preprocessor/sample_segmentations/custom/custom-hipsc_230741/extra_data.json</code> JSON file with the following content: <pre><code>{\n    \"volume\": {\n        \"voxel_size\": [\n            0.108333,\n            0.108333,\n            0.108333\n        ],\n        \"channel_ids_mapping\": {\n            \"0\": \"dna\",\n            \"1\": \"membrane\",\n            \"2\": \"structure\"\n        },\n        \"dataset_specific_data\": {\n            \"ometiff\": {\n                \"cell_stage\": \"M4M5\",\n                \"missing_dimensions\": [\"T\"]\n            }\n        }\n    },\n    \"segmentation\": {\n        \"voxel_size\": [\n            0.108333,\n            0.108333,\n            0.108333\n        ],\n        \"segmentation_ids_mapping\": {\n            \"0\": \"dna_segmentation\",\n            \"1\": \"membrane_segmentation\",\n            \"2\": \"membrane_segmentation_roof\",\n            \"3\": \"struct_segmentation\",\n            \"4\": \"struct_segmentation_roof\"\n        },\n        \"dataset_specific_data\": {\n            \"ometiff\": {\n                \"cell_stage\": \"M4M5\",\n                \"missing_dimensions\": [\"T\"]\n            }\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Add custom-hipsc_230741 entry to the internal database</p> <p>To add a custom-hipsc_230741 entry to the internal database, from root directory (<code>molstar-volseg</code>) run:</p> <pre><code>python preprocessor/cellstar_preprocessor/preprocess.py preprocess --mode add --input-path test-data/preprocessor/sample_segmentations/custom/custom-hipsc_230741/extra_data.json --input-kind extra_data --input-path test-data/preprocessor/sample_volumes/custom/custom-hipsc_230741/hipsc_230741_volume.ome.tif --input-kind ometiff_image --input-path test-data/preprocessor/sample_segmentations/custom/custom-hipsc_230741/hipsc_230741_segmentation.ome.tif --input-kind ometiff_segmentation --entry-id custom-hipsc_230741 --source-db custom --source-db-id custom-hipsc_230741 --source-db-name custom --working-folder temp_working_folder --db-path preprocessor/temp/test_db\n</code></pre> </li> </ol>"},{"location":"preprocessor/remove_descriptions/","title":"remove-descriptions","text":"<p>This command allows removing specific description (part of annotations.json specifying biologically relevant information) in <code>annotations.json</code> which is a part of internal database entry. Requires the following arguments:</p> Argument Description <code>--entry_id</code> (string) entry ID in internal database, corresponding to the entry folder name (e.g. <code>emd-1832</code>) <code>--source_db</code> (string) source database, corresponding to the source database folder name in internal database (e.g. <code>emdb</code>) <code>--id</code> (string) specifies description UUID (can be obtained from <code>annotations.json</code> file) <code>--db_path</code> (string) specifies the path to the internal database"},{"location":"preprocessor/remove_segment_annotations/","title":"remove-segment-annotations","text":"<p>This command allows removing specific segment annotations from an internal database entry. Requires the following arguments:</p> Argument Description <code>--entry_id</code> (string) entry ID in internal database, corresponding to the entry folder name (e.g. <code>emd-1832</code>) <code>--source_db</code> (string) source database, corresponding to the source database folder name in internal database (e.g. <code>emdb</code>) <code>--id</code> (string) specifies segment annotation UUID (can be obtained from annotations.json file) <code>--db_path</code> (string) specifies the path to the internal database"},{"location":"preprocessor/remove_segmentation/","title":"remove-segmentation","text":"<p>This command allows removing specific segmentation data from an internal database entry. Requires the following arguments:</p> Argument Description <code>--entry_id</code> (string) entry ID in internal database, corresponding to the entry folder name (e.g. <code>emd-1832</code>) source_db (string) - source database, corresponding to the source database folder name in internal database (e.g. <code>emdb</code>) <code>--id</code> (string) specifies segmentation ID (e.g. <code>0</code>, <code>ribosomes</code>) <code>--kind</code> (string) specifies the segmentation kind (one of the following: <code>lattice</code>, <code>mesh</code>, <code>geometric_segmentation</code>) <code>--db_path</code> (string) specifies the path to the internal database <code>--working_folder</code> (string) specifies the path to folder used by Preprocessor for temporary files and data manipulation"},{"location":"preprocessor/remove_volume/","title":"remove-volume","text":"<p>This command allows removing all volume data from internal database entry. Requires the following arguments:</p> Argument Description <code>--entry_id</code> (string) entry ID in internal database, corresponding to the entry folder name (e.g. <code>emd-1832</code>) <code>--source_db</code> (string) source database, corresponding to the source database folder name in internal database (e.g. <code>emdb</code>) <code>--db_path</code> (string) specifies the path to the internal database <code>--working_folder</code> (string) specifies the path to folder used by Preprocessor for temporary files and data manipulation"},{"location":"server_api/overview/","title":"Background","text":"<p>In order to visualize an internal database entry using local instance of Mol* 3D viewer, you need to host a local instance of server API. Local instance of Mol* 3D viewer then will be able to send dynamic queries to the local instance of server API, and visualize their results.</p>"},{"location":"server_api/overview/#hosting-server-api","title":"Hosting Server API","text":"<p>Make changes in <code>server/cellstar_server/app/settings.py</code> file. <code>DB_PATH</code> constant (line <code>8</code> in the code block below) should point to the path to your internal database that was built using Preprocessor, e.g.:</p> <pre><code>from pathlib import Path\nfrom pydantic import BaseSettings\n\nclass _Settings(BaseSettings):\n    HOST: str = \"0.0.0.0\"\n    PORT: int = 9000\n    DEV_MODE: bool = False\n    DB_PATH: Path = Path('preprocessor/temp/test_db')\n    GIT_TAG: str = ''\n    GIT_SHA: str = ''\n\nsettings = _Settings()\n</code></pre> <p>Optionally, you can change the HOST and PORT constants to deploy server API at a local address other than <code>localhost</code> <code>127.0.0.1</code> (<code>0.0.0.0</code>) and port other than <code>9000</code>.</p> <p>From the root repository directory, run <code>server/cellstar_server/serve.py</code> script to deploy the server API:</p> <pre><code>python server/cellstar_server/serve.py\n</code></pre> <p>It will deploy server API at http://localhost:9000/ with API documentation available at http://localhost:9000/docs.</p> <p>In order for Mol* Volumes &amp; Segmentations extension of Mol* 3D viewer to be able to load entries, http://localhost:9000/v1 should be specified as Server Url parameter:</p> <p></p>"},{"location":"vs_toolkit/overview/","title":"Usage","text":""},{"location":"vs_toolkit/overview/#quick-start","title":"Quick start","text":"<p>To run the Volumes &amp; Segmentations toolkit and produce the static files suitable for visualization at the frontend:</p> <ol> <li> <p>Build the internal database by adding desired entries using preprocessor (see Documentation for preprocess command of Preprocessor and examples on how to add entries to the internal database) </p> </li> <li> <p>From repository root (<code>molstar-volseg</code> by default) run: <pre><code>    python --db_path PATH_TO_DB --out OUTPUT_FILE --json-params-path PATH_TO_JSON_WITH_PARAMETERS\n</code></pre></p> </li> </ol>"},{"location":"vs_toolkit/overview/#arguments-description","title":"Arguments description","text":"Argument Description <code>--db_path</code> The --db_path argument is mandatory and dictates the path to the internal database constructed using the Preprocessor <code>--out</code> The --out argument is mandatory and specifies the desired name for the output file. This file name must include the mandatory .cvsx extension <code>--json-params-path</code> The --json-params-path argument is obligatory and defines the path to the JSON file containing the user-specified query parameters (see table below)"},{"location":"vs_toolkit/overview/#query-parameters","title":"Query parameters","text":"Parameter Description Kind Type Default entry_id ID of entry in internal database (e.g. emd-1832) mandatory string N/A source_db Source database (e.g. emdb) mandatory string N/A segmentation_kind Kind of segmentation (e.g. lattice) optional 'mesh', 'lattice', 'geometric-segmentation' all segmentation kinds time Timeframe index optional integer all available time frame indices channel_id Volume channel ID optional string all available channel IDs segmentation_id Segmentation ID optional string all available segmentation IDs max_points Maximum number of points for volume and/or lattice segmentation. Used to determine the most suitable downsampling level optional integer 1000000000000"},{"location":"vs_toolkit/overview/#example","title":"Example","text":"<p>This example shows how produce <code>results.cvsx</code> CVSX file for <code>idr-13457537</code>internal database entry (with the database located in <code>temp/test_db</code>) containing the volume data for channel 2 and timeframe index 4, and segmentation data for all available segmentation kinds and timeframe index 4</p> <p>First create <code>json_with_query_params.json</code> file with the following content: </p> <pre><code>        \"entry_id\": \"idr-13457537\",\n        \"source_db\": \"idr\",\n        \"channel_id\": \"2\",\n        \"time\": 4\n</code></pre> <p>Then use the following command:     <pre><code>python vs_toolkit.py --db_path temp/test_db --out results.cvsx composite --json-params-path json_with_query_params.json\n</code></pre></p> <p>This will query data for channel <code>2</code> and time frame <code>4</code> for volume and data for all available segmentation kinds and time frame <code>4</code>, and pack it into <code>idr-13457537.cvsx</code> file</p>"}]}